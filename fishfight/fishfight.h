// Class automatically generated by Dev-C++ New Class wizard

#ifndef FISHFIGHT_H
#define FISHFIGHT_H
#include <vector>
#include "actor.h"

enum {
	FF_TRIANGLE,
	FF_SQUARE,
	FF_CIRCLE,
	FF_CROSS,
	FF_LEFT,
	FF_UP,
	FF_RIGHT,
	FF_DOWN,
	FF_LTRIGGER,
	FF_RTRIGGER,
	FF_SELECT,
	FF_START,
	FF_HOLD,
	FF_MAX		// Last one.
};

class Entity;
/**
 * This is the main game, which is event/timer driven.
 */
class FishFight
{
	public:
		// class constructor
		FishFight();
		// class destructor
		~FishFight();
		Entity * getSceneEntity(); // returns the value of sceneEntity
		int getScore(); // returns the value of score
		/**
		 * New game is called to initialize the game engine.  It resets
		 * the score, health, level, loads the initial level, and resets 
		 * the NPCs.
		 */
		void newGame();
		int getHealth(); // returns the value of health
		/**
		 * Updates the state of all entities in the currently active level.
		 * 
		 * @param milliseconds milliseconds since the game/level/machine started.
		 */
		void updateLevel(int milliseconds);
		std::vector<Actor *> npc;
		/**
		 * Loads in the level specified, and initializes all things needed.
		 * 
		 * @param level the level number to load (0 based)
		 * @returns 0 on success, negative on error.
		 */
		int load(int level);
		/**
		 * A keyboard event was received.
		 * 
		 * @param ch ASCII character or special keycode.
		 * @param down true if pressed, or false if released.
		 */
		void keyEvent(int ch,int down);
		/**
		 * Receives a button event.
		 * 
		 * @param id the button id of the button (0=triangle, etc).
		 * @param down true if the button is pressed, and false if the button was released.
		 */
		void buttonEvent(int id,int down,int milliseconds);
		/**
		 * The scene is static meshes for the level which is currently loaded.
		 */
		Entity * sceneEntity;
		Actor * getHero(); // returns the value of heroEntity
	protected:
		/**
		 * The hero entity is a MD3 character for the level, that represents the main player.
		 */
		Actor * hero;
		/** Model Shinobu */
		MD3Entity *modelShinobu;
		/** Model Narusegawa */
		MD3Entity *modelNarusegawa;

		/**
		 * The current displayed score.  This is updated by this class, 
		 * and  displayed in the HUD.
		 */
		int score;
		/**
		 * Last parameter to updateLevel.
		 */
		int lastTick;
		/**
		 * This is the map of what buttons are down, and what ones are up.
		 * This determines what actions to take to update the hero position.
		 */
		int buttonState;
	protected:
};

#endif // FISHFIGHT_H
